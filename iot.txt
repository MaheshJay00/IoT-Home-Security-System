int pir = 2;
int pir1=0;
int buttonState = 0;
int temp = A0; //declaring the temperature sensor
float temp_celsius;
float Voltage;
float analog_reading;
float temp_far;

int pira = 2;
int pir2=0;
int buttonState1 = 0;
int temp1 = A1; //declaring the temperature sensor
float temp_celsius1;
float Voltage1;
float analog_reading1;
float temp_far1;
String ssid     = "Simulator Wifi";  // SSID to connect to 

String password = ""; // Our virtual wifi has no password (so dont do your banking stuff on this network) 

String host     = "api.thingspeak.com"; // Open Weather Map API 

const int httpPort   = 80; 
String uri1     = "/update?api_key=6ULAC5BHXRT4FJDS&field1=0";
String uri2     = "/update?api_key=6ULAC5BHXRT4FJDS&field2=0";
String uri3     = "/update?api_key=26F2OJPZR2CM8NTA&field1=0";
String uri4     = "/update?api_key=26F2OJPZR2CM8NTA&field2=0";
//String field1 = "field1";
//String field2 = "field2";

//String uri     = "/update?api_key=XO0T3ISE3CTXMSPS&field1="; 
//String uri2    = "/update?api_key=ZL2YJ76PNRV3J0C6&field1=";
//string uri3    = "/update?api_key=PR4YM00GCMM562B4&field1=";
 //String field1 = "field1";
//String field2 = "field2";
//String uri1     = "/update?api_key=XO0T3ISE3CTXMSPS&field2="; 
int setupESP8266(void) { 

  // Start our ESP8266 Serial Communication 

  Serial.begin(115200);   // Serial connection over USB to computer 

  Serial.println("AT");   // Serial connection on Tx / Rx port to ESP8266 

  delay(10);        // Wait a little for the ESP to respond 

  if (!Serial.find("OK")) return 1; 

     

  // Connect to 123D Circuits Simulator Wifi 

  Serial.println("AT+CWJAP=\"" + ssid + "\",\"" + password + "\""); 

  delay(10);        // Wait a little for the ESP to respond 

  if (!Serial.find("OK")) return 2; 

   

  // Open TCP connection to the host: 

  Serial.println("AT+CIPSTART=\"TCP\",\"" + host + "\"," + httpPort); 

  delay(50);        // Wait a little for the ESP to respond 

  if (!Serial.find("OK")) return 3; 

   

  return 0; 

} 

 

void anydata(void) { 
  analog_reading = analogRead(A0);
  Serial.print("Analog reading:");//read analog reading 
  Serial.println(analog_reading); 
  
  //converting analog reading to voltage
  Voltage = analog_reading*5/1024;
    // we divide by 1024 as the analog reading from the data pin is between 0 and 1024
    // 5 because 5Volts;
  
  Serial.print("Voltage reading:"); //display Voltage
  Serial.println(Voltage);
  
  //reading in celsius: 
  //converting from 10 mv per degree with 0.5V offset
  temp_celsius = 100* (Voltage - 0.5) ;
  Serial.println("Celsius reading:" + String(temp_celsius) + (" C"));
  temp_far = (temp_celsius * 9/5) + 32 ;
  Serial.println("Farenheit reading:" + String(temp_far)  + (" F\n"));
  delay(3000); //give a delay of 3 seconds before repeating the loop

   
/* read the state of the pushbutton
  buttonState = digitalRead(2);
 
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    pir1 = 100;
  } else {
   pir1 = 0;
  }
  Serial.print("pir");
  Serial.println(pir1);
  delay(10); // Delay a little bit to improve simulation performance*/
   


    // Construct our HTTP call 
    //String httpPacket = "GET " + uri2 + String(temp_celsius) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    String httpPacket = "GET " + uri1 + String(30.1) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 

    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n"))
    { 
      test();
      return; 
    }
}
  void test(void)
  {
     buttonState = digitalRead(2);
 
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    pir1 = 100;
  } else {
   pir1 = 0;
  }
  Serial.print("pir");
  Serial.println(pir1);
  delay(10);
   String httpPacket = "GET " + uri2 + String(0) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
     int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 
  
    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n")) return; 

  } 
void anydata1(void) { 
  analog_reading1 = analogRead(A1);
  Serial.print("Analog reading one:");//read analog reading 
  Serial.println(analog_reading1); 
  
  //converting analog reading to voltage
  Voltage1 = analog_reading1*5/1024;
    // we divide by 1024 as the analog reading from the data pin is between 0 and 1024
    // 5 because 5Volts;
  
  Serial.print("Voltage reading one:"); //display Voltage
  Serial.println(Voltage1);
  
  //reading in celsius: 
  //converting from 10 mv per degree with 0.5V offset
  temp_celsius1 = 100* (Voltage1 - 0.5) ;
  Serial.println("Celsius reading one:" + String(temp_celsius1) + (" C"));
  temp_far = (temp_celsius1 * 9/5) + 32 ;
  Serial.println("Farenheit reading one:" + String(temp_far1)  + (" F\n"));
  delay(3000); //give a delay of 3 seconds before repeating the loop

   
/* read the state of the pushbutton
  buttonState = digitalRead(2);
 
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    pir1 = 100;
  } else {
   pir1 = 0;
  }
  Serial.print("pir");
  Serial.println(pir1);
  delay(10); // Delay a little bit to improve simulation performance*/
   


    // Construct our HTTP call 
    //String httpPacket = "GET " + uri2 + String(temp_celsius) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    String httpPacket = "GET " + uri3 + String(temp_celsius1) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 

    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n"))
    { 
      test1();
      return; 
    }
}
  void test1(void)
  {
     buttonState1 = digitalRead(3);
 
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState1 == HIGH) {
    pir2 = 100;
  } else {
   pir2 = 0;
  }
  Serial.print("pir2");
  Serial.println(pir2);
  delay(10);
   String httpPacket = "GET " + uri4 + String(100) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
     int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 
  
    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n")) return; 

  } 
  /*void anydata1(void) { 

 analog_reading = analogRead(A0);
  Serial.print("Analog reading:");//read analog reading 
  Serial.println(analog_reading); 
  
  //converting analog reading to voltage
  Voltage = analog_reading*5/1024;
    // we divide by 1024 as the analog reading from the data pin is between 0 and 1024
    // 5 because 5Volts;
  
  Serial.print("Voltage reading:"); //display Voltage
  Serial.println(Voltage);
  
  //reading in celsius: 
  //converting from 10 mv per degree with 0.5V offset
  temp_celsius = 100* (Voltage - 0.5) ;
  Serial.println("Celsius reading:" + String(temp_celsius) + (" C"));
  temp_far = (temp_celsius * 9/5) + 32 ;
  Serial.println("Farenheit reading:" + String(temp_far)  + (" F\n"));
  delay(10)//give a delay of 3 seconds before repeating the loop

    // Construct our HTTP call 
    String httpPacket = "GET " + uri2 + String(temp_celsius) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 

    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n")) return; 

  } */

/*void anydata2(void) { 
    

    int gas = map(analogRead(A2),0,1023,0,100); 

    // Construct our HTTP call 
    String httpPacket = "GET " + uri3 + String(gas) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n"; 
    int length = httpPacket.length(); 

    // Send our message length 
    Serial.print("AT+CIPSEND="); 
    Serial.println(length); 
    delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1; 

    // Send our http request 
    Serial.print(httpPacket); 
    delay(10); // Wait a little for the ESP to respond 
    if (!Serial.find("SEND OK\r\n")) return; 

  } */

 

 

void setup() { 

   

  setupESP8266(); 
  pinMode(pir, INPUT);  
  pinMode(A0, INPUT);

} 

 

void loop() { 


 anydata(); 
 
  

  delay(1000); 
  
  anydata1();
  
  delay(1000);
}